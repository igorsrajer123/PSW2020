// <auto-generated />
using System;
using HospitalApp.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace HospitalApp.Migrations
{
    [DbContext(typeof(MyDbContext))]
    [Migration("20201215115233_General Practitioner added")]
    partial class GeneralPractitioneradded
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.0");

            modelBuilder.Entity("HospitalApp.Models.Appointment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("DoctorId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<string>("Time")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.HasIndex("PatientId");

                    b.ToTable("Appointment");
                });

            modelBuilder.Entity("HospitalApp.Models.Doctor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("FirstName")
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<string>("WorkingDays")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Doctor");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            FirstName = "Misa",
                            IsDeleted = false,
                            LastName = "Simonovic",
                            Type = 1,
                            WorkingDays = "2020-12-15 11 AM,2020-12-15 12 PM,2020-12-15 01 PM,2020-12-15 02 PM,2020-12-15 03 PM,2020-12-15 04 PM,2020-12-16 09 AM,2020-12-16 10 AM,2020-12-16 11 AM,2020-12-16 12 PM,2020-12-16 01 PM,2020-12-16 02 PM,2020-12-16 03 PM,2020-12-16 04 PM,2020-12-17 09 AM,2020-12-17 10 AM,2020-12-17 11 AM,2020-12-17 12 PM"
                        },
                        new
                        {
                            Id = 2,
                            FirstName = "Igor",
                            IsDeleted = false,
                            LastName = "Mijatovic",
                            Type = 1,
                            WorkingDays = "2020-12-15 11 AM,2020-12-15 12 PM,2020-12-15 01 PM,2020-12-15 02 PM,2020-12-15 03 PM,2020-12-15 04 PM,2020-12-16 09 AM,2020-12-16 10 AM,2020-12-16 11 AM,2020-12-16 12 PM,2020-12-16 01 PM,2020-12-16 02 PM,2020-12-16 03 PM,2020-12-16 04 PM,2020-12-17 09 AM,2020-12-17 10 AM,2020-12-17 11 AM,2020-12-17 12 PM"
                        },
                        new
                        {
                            Id = 3,
                            FirstName = "Srdjan",
                            IsDeleted = false,
                            LastName = "Tepavcevic",
                            Type = 0,
                            WorkingDays = "2020-12-15 11 AM,2020-12-15 12 PM,2020-12-15 01 PM,2020-12-15 02 PM,2020-12-15 03 PM,2020-12-15 04 PM,2020-12-16 09 AM,2020-12-16 10 AM,2020-12-16 11 AM,2020-12-16 12 PM,2020-12-16 01 PM,2020-12-16 02 PM,2020-12-16 03 PM,2020-12-16 04 PM,2020-12-17 09 AM,2020-12-17 10 AM,2020-12-17 11 AM,2020-12-17 12 PM"
                        });
                });

            modelBuilder.Entity("HospitalApp.Models.Feedback", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsVisible")
                        .HasColumnType("bit");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("Id");

                    b.HasIndex("PatientId")
                        .IsUnique();

                    b.ToTable("Feedback");
                });

            modelBuilder.Entity("HospitalApp.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("Password")
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.HasKey("Id");

                    b.ToTable("User");
                });

            modelBuilder.Entity("HospitalApp.Models.Administrator", b =>
                {
                    b.HasBaseType("HospitalApp.Models.User");

                    b.ToTable("Administrator");

                    b.HasData(
                        new
                        {
                            Id = 5,
                            Address = "Visnjiceva 32, Beograd",
                            FirstName = "admin",
                            IsDeleted = false,
                            LastName = "administratovic",
                            Password = "admin",
                            PhoneNumber = "+3811233212",
                            Role = "Administrator",
                            Username = "admin"
                        });
                });

            modelBuilder.Entity("HospitalApp.Models.Patient", b =>
                {
                    b.HasBaseType("HospitalApp.Models.User");

                    b.Property<int?>("AdministratorId")
                        .HasColumnType("int");

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<string>("Gender")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<int?>("GeneralPractitionerId")
                        .HasColumnType("int");

                    b.Property<bool>("IsBlocked")
                        .HasColumnType("bit");

                    b.HasIndex("AdministratorId");

                    b.HasIndex("GeneralPractitionerId");

                    b.ToTable("Patient");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "Tomiceva 22, Zrenjanin",
                            FirstName = "Marko",
                            IsDeleted = false,
                            LastName = "Simonovic",
                            Password = "123",
                            PhoneNumber = "+38122555333",
                            Role = "Patient",
                            Username = "maki",
                            Age = 15,
                            Gender = "male",
                            IsBlocked = false
                        });
                });

            modelBuilder.Entity("HospitalApp.Models.Appointment", b =>
                {
                    b.HasOne("HospitalApp.Models.Doctor", "Doctor")
                        .WithMany("Appointments")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HospitalApp.Models.Patient", "Patient")
                        .WithMany("Appointments")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("HospitalApp.Models.Feedback", b =>
                {
                    b.HasOne("HospitalApp.Models.Patient", "Patient")
                        .WithOne("Feedback")
                        .HasForeignKey("HospitalApp.Models.Feedback", "PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("HospitalApp.Models.Administrator", b =>
                {
                    b.HasOne("HospitalApp.Models.User", null)
                        .WithOne()
                        .HasForeignKey("HospitalApp.Models.Administrator", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HospitalApp.Models.Patient", b =>
                {
                    b.HasOne("HospitalApp.Models.Administrator", "BlockedBy")
                        .WithMany("BlockedUsers")
                        .HasForeignKey("AdministratorId");

                    b.HasOne("HospitalApp.Models.Doctor", "GeneralPractitioner")
                        .WithMany("Patients")
                        .HasForeignKey("GeneralPractitionerId");

                    b.HasOne("HospitalApp.Models.User", null)
                        .WithOne()
                        .HasForeignKey("HospitalApp.Models.Patient", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("BlockedBy");

                    b.Navigation("GeneralPractitioner");
                });

            modelBuilder.Entity("HospitalApp.Models.Doctor", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("Patients");
                });

            modelBuilder.Entity("HospitalApp.Models.Administrator", b =>
                {
                    b.Navigation("BlockedUsers");
                });

            modelBuilder.Entity("HospitalApp.Models.Patient", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("Feedback");
                });
#pragma warning restore 612, 618
        }
    }
}
